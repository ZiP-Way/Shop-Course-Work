<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAAAAAAAD/2wBDAAMCAgYGCAgIBgYFCAgICAgICAgICAcHBwYICAgIBggICAgI
        BgYIBwgICAgICAoFCAgICQkJCAULDQoIDQgICQj/2wBDAQMEBAICAgkCAgkIAgICCAgICAgICAgICAgI
        CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAj/wAARCAGAAgADAREAAhEBAxEB/8QA
        HQABAAMAAwEBAQAAAAAAAAAAAAYHCAEEBQMCCf/EAE4QAAEDAgEFBw0PAwQCAwAAAAABAgMEEQUGBxIh
        kwgxNUFRYXETFhcYIlJTVFVyc4HSFCMyQkNidIKjsbKzwtPUkZKhJDPB8BWDRGPR/8QAFAEBAAAAAAAA
        AAAAAAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/AP6SgAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAHICwCwCwCwCwCwCwCwCwCwCwCwCwCwCwCwCwCwCwCwCwCwCwADgAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArrP5WyRYc50UkjHdWiTSY5zHWVVul2qi2XkAzV1z1vjlbt5vbA
        dc9b45W7eb2wHXPW+OVu3m9sB1z1vjlbt5vbAdc9b45W7eb2wHXPW+OVu3m9sB1z1vjlbt5vbAdc9b45
        W7eb2wHXPW+OVu3m9sB1z1vjlbt5vbAdc9b45W7eb2wHXPW+OVu3m9sB1z1vjlbt5vbAdc9b45W7eb2w
        HXPW+OVu3m9sB1z1vjlbt5vbAdc9b45W7eb2wHXPW+OVu3m9sB1z1vjlbt5vbAdc9b45W7eb2wHXPW+O
        Vu3m9sB1z1vjlbt5vbAdc9b45W7eb2wNO5jauSXDYHSPke5Xz3c9znuW0z0S7nKqrZNSa96wE9AAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK03Q3BrvTw/e4DLoFtZO7nmerghnbWwNSaNkiNWN6
        q1HJpWVUel1TlsB6Haw1HlCn2T/3AHaw1HlCn2T/ANwB2sNR5Qp9k/8AcAdrDUeUKfZP/cAdrDUeUKfZ
        P/cAdrDUeUKfZP8A3AHaw1HlCn2T/wBwB2sNR5Qp9k/9wB2sNR5Qp9k/9wB2sNR5Qp9k/wDcAdrDUeUK
        fZP/AHAHaw1HlCn2T/3AHaw1HlCn2T/3AHaw1HlCn2T/ANwB2sNR5Qp9k/8AcAdrDUeUKfZP/cAdrDUe
        UKfZP/cAdrDUeUKfZP8A3AHaw1HlCn2T/wBwDysqswE9DTy1DqyB6RN0lakb2q7ukbZFV6om/wAgFVAa
        rzB8FwefP+fIBYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABWm6G4Nd6eH73AZdA2Tm0
        4Povo0X4EAkgAAAAAAAAAAAAAAAABzYDhAAACIZ3uDKz0X62AZBA1XmD4Lg8+f8APkAsIAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArTdDcGu9PD97gMugbJzacH0X0aL8CASQAAAAAAAAAAAAAA
        ABXedbO3HhSJFC1slS9t0at9CFq6kfJZbrf4sSKirrVVRLKoZzx3LrEKxyuqKuodf4qPcyNvmxtVrE6U
        S4HSw7KKrp3I6CpqY3Jxske3+qI6yp81UVFAvHNVn1dO9lNiSt03KjY6hERqPcupGSompHOXUkqWRVsi
        ol7qF2gQ/O9wZWei/WwDIIGq8wfBcHnz/nyAWEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAVpuhuDXenh+9wGXQNk5tOD6L6NF+BAJIAAAeVlNlPTUETpqqRGMTUnG97l3msbdFc5eTiS6rZEVUC
        pmbp6HTstBL1K/wklasluXQ0Eb9XqnrAtjJjKqmxCJJqWRHsXUqbz43b+i9u+1ycm8upUVUVFA9YAAAA
        AAAD51NS2Nrnv+CxrnO6Gorl/wAIBiTHcbkrJpZ5Vu+V6vXmvqRqczWojU5kQDogAFgNhZrMpHV1BTzS
        LeTRWORe+fG5Y1cvO5ERy87lA+ed7gys9F+tgGQQNV5g+C4PPn/PkAsIAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAArTdDcGu9PD97gMugbJzacH0X0aL8CASQAAVbb9v/wAAyTnby9didU5WOX3P
        CrmQN4lRFs6W3LIqXvxN0E4lAhAEpzdZdy4VUNlbpOidZs8ab0jOVE3tNvwmu5bpvOUDX9HWMlY2SNyO
        Y9qOa5N5zXJdFTpQD6gAAAAAA6OO0bpoJo2/CfFIxvS5itT/ACqAYgQAAAAapzBUbo8MiV3ykkz081Xq
        xF9eiq9FgPVzvcGVnov1sAyCBqHMxXdQwZkqpfqaVUlr20tCWV1r2W17WvZQPUyUzy4XXWa2bqMi/JT2
        jcq8jXXWN/Qjr8wE5A4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArTdDcGu9PD97gMugbJ
        zacH0X0aL8CASQABXmfTKv3HQvYxbSVKrA3lRioqyu/s7m/K9oGVQAADQu5xyy6pE+ikd3UN5IeeJy92
        36j1v0P5gLoAAAAAAAAzLnuzZyUcz6qBirTTOVztFL+55Ha3NdbeY9bua/euqt4kuFWAAJLkFkHUYrMk
        USKjEVFllt3MLeO67yvXebHvqvIiKqBsDD8PjgjZFE3RZG1rGJyNaminTvb4EYzvcGVnov1sAyCBpXNh
        wA70Vb+OYDNIEqyVznYlh9kp6hyxp8lJ75FbkRq62fUVv/AFx5LbpClls2uhfA5dWmy8sN+VU/3GJ6n2
        5eMC1cKxmCpYj6eaKVi/Gjc16dC2XUvK1bKgHcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACt
        N0Nwa708P3uAy6BsnNpwfRfRovwIBJAAGYN0HlH7oruotXuKViR83VHokki9OtrF52WArEAAA9vIvKZ2
        H1UNQ29o3ppp38a9zI31sVbc+iBs+nna9rXMVFa5qOaqbzmuRHNVOlFRQP2AAAAAAD8zQteite1rmuRU
        c1yI5rkXUqKioqKi8i6gK2x3c/YVUOV0aT06rvpE5Op/2Pa9G9DVanMB0sN3N2GxuvLLWSonxVcyNq9O
        gzSt0OQCzMIwWClYkdNDHExN5rERqX5V43OXjeqqq8qgdwCIZ3uDKz0X62AZBA1RmJha/CoWua1zXOqE
        c1URUcizSIqKi6lRU1KigeflVueKCou6kc+lfyJ75Cq+Yqo5v1XonMBTuVWZ3E6G7nQLLGnysPvjbfOb
        ZJGdKttzqBCEUDu4VjM9M7Tp5ponp8aN7mKvMtlS6fNW6cwFrZLbpCqis2uhZO3wjLRzJzqn+29eazOn
        jAuLJXOdh2IWSnqGpIvyUnvct+RGu1P6WK5AJVYDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABWm
        6G4Nd6eH73AZdA2Tm04Povo0X4EAkgHwr61kLHySLZsbXPd5rUVy/wCEAxFiWIvqJJJZPhyvdI7pequX
        7/uA6wAAAA0/ufsqvdVF1F6++Uq9T51iXXEvqs5n1GgWcAAAAOvJiMTXIx0sKPXeYr2o9ehqrpL/AEA7
        AAAAAAAIhne4MrPRfrYBkEDVeYPguDz5/wA+QCwgObgRPKrNdhuIXWenaki/Kx+9y35VVup/12uAp3Kr
        c4VcN3UMrKhvePtFMicifJvX1svycQFVYnhE9M5WVEM0T0+LI1zF6UuiXT5yXReUDqKgGuMzuHVEVBCt
        TLM98iLIiSOVyxsd/tsRXKqomgiO0eJXOAmoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACtN0Nwa7
        08P3uAy6BsnNpwfRfRovwIBJAK/z6437nw2VEWzp1ZAnQ5dJ/wDWNrk9YGUgAAAAAnOZrK73BXRq9bRT
        e8y8iI5e4d9V+iqr3qvA1qqAcAAK/wA8ucJcMp0SFUSonu2Lj6m1LacluVt0Rt/jKi2VEVAMqzTue5Xv
        c9z1W6vcqueq791cqqqr869wLUza59J6NWw17pJqfeR63dNAm8mtbrKxO8W7kTeVfggaPoa+OZjZIXsf
        G9NJr2rdrk5UX/tlunEoH3AAAAEQzvcGVnov1sAyCBqvMHwXB58/58gFhAAAADJ+e3Kv3bXyI1bx0/vE
        fIqtW8jvXJpJ0NaB4eb/ACXXEKyGnsui52lIvJExNN/RdE0U53NA2Y1qJqRERE1IiakRE1IicycgAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABWm6G4Nd6eH73AZdA2Tm04Povo0X4EAkgFB7pzGLupadF3m
        vmcnO5UiYvq0X26VAo4AAAAAOFQDWmZ3LhMRpG6brzw2jm5XW+BJ0Pamte/STkAnQH5lmaxFc5Ua1qK5
        zlWyNREuqqvEiIl1UDH2czLFcSrJJkv1NPe4U5ImKuituJXqqvXkV1uJAIqAAnua3OnLhUmg/SfSvX3y
        PfWNV+Uj5HJxs1I9E4lsqBqfDMTiqI2SwPa+N6I5rmrdFRfuVN5WrrRboqIqKB2QAACIZ3uDKz0X62AZ
        BA1XmD4Lg8+f8+QCwgAACNZx8qv/AB1HNOippo3Qi55X9yz+2+mqcjVAxv8A96QNB7mvJXQimrHprlXq
        UV/BsW73JzOfZt//AK1AuoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArTdDcGu9PD97gMugbJza
        cH0X0aL8CASQDJ2fDFur4lPr1RaEKc2g27k/vc/13AgYAAAAAAJBkRlpPhc7Z4dafBkjVVRs0ardWryL
        xtfZVatt/Wihoihz+4O9iPfPLG62uJ0UrnovJpMY9i9OknqArDOnnvWvYtPRNkjgdqke7VJOne2RV0I1
        423VXar6KalCpgAAABYWabOo/C5OpzK51LIvdt1qsLl1dUjT8cafCTnRLhqelqmSNa+NzXMeiOa5q3a5
        qpdFReNFTjA+gACIZ3uDKz0X62AZBA1XmD4Lg8+f8+QCwgAADPG6Ryq6pNFSMXuYU6rJyLJIlmovOyPX
        /wCxQKiw3D3zyRxRpd8j2xsTlc9yNT/K7/FrA2pk9grKOCGCP4MUbWIvfKia3LzuddyryqoHoAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFabobg13p4fvcBl0DZObTg+i+jRfgQCRvkRqKq7yIqr0JrAw/
        jWILPNNKq3WWWSRfrvc//kDpgAAAAAAAAAAAAAAALWzK51/cL0pap/8Apnu7hy//ABnuXf8AROVe671e
        643AaXRb71v+F/7ygAIhne4MrPRfrYBkEDVeYPguDz5/z5ALCAAdXFsTZTRSTSrZkTHSOXmaiuX1rayJ
        xqqIBinG8XfVTSzyfDlkdIvNpKqo1OZqWaiciIBZ+5zyV6vVPqXp3FM2zeRZpEVE/tZpL0ujA0iAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK03Q3BrvTw/e4DLoGyc2nB9F9Gi/AgH7ziYl7noKuRFsqU
        8qNXkc9qxt/o5yAYzQAAAAAAAAAAAAAAAAAAXzmIzqX0aCrfr3qaRy76J8g5V5E/216W96gF6ARDO9wZ
        Wei/WwDIIGq8wfBcHnz/AJ8gFhAAKg3R2VXUaeOlY6zqh2k+2/1KNb2+u+3SjXoBnFVA19moyU/8fQwx
        ubaR6dVl5eqSa7L5jdFn1eLeAl4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArTdDcGu9PD97gM
        ugbJzacH0X0aL8CAeVnowyqqaB8NJC+V8kkSK1troxHdUcutWpa7UT6yAZ67EWM+T6j7P9wB2IsZ8n1H
        2ftgOxFjPk+o+z9sB2IsZ8n1H2ftgOxFjPk+o+z9sB2IsZ8n1H2ftgOxFjPk+o+z9sB2IsZ8n1H2ftgO
        xFjPk+o+z9sB2IsZ8n1H2ftgOxFjPk+o+z9sB2IsZ8n1H2ftgOxFjPk+o+z9sB2IsZ8n1H2ftgOxFjPk
        +o+z9sB2IsZ8n1H2ftgEzSYymtMPqUVNaKisRUXiVF6pq6QNJZtsWr5YEbiVNLFPHZqvdo2qG8T+5VbO
        4nN1a7KnwtQfjO9wZWei/WwDIIGq8wfBcHnz/nyAWEByBjvOflX/AOQrZpmreNF6nFydTj7lFTz10n/W
        6AOzmiyU9310THNvHGvVpeTRZrRq+e9WttyK4DXaqBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAK03Q3BrvTw/e4DLoGyc2nB9F9Gi/AgEkAAAAAAAAAAAAAAAAAAAAAAiGd7gys9F+tgGQQNV5g+C4PP
        n/PkAsICEZ48q/cNBKrXWkm94i5UV6LpOTzY0cqLy6IGSbAaW3O2SvuekdUPbZ9U67eVIWXaz+52k7nT
        QAtcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK03Q3BrvTw/e4DLoEuw7O1i9PGyKGte2ONqM
        Y1I6dUa1qWRLugcq2TjVVUDs9mvG/H5NlTfxwHZrxvx+TZU38cB2a8b8fk2VN/HAdmvG/H5NlTfxwHZr
        xvx+TZU38cB2a8b8fk2VN/HAdmvG/H5NlTfxwHZrxvx+TZU38cB2a8b8fk2VN/HAdmvG/H5NlTfxwHZr
        xvx+TZU38cB2a8b8fk2VN/HAdmvG/H5NlTfxwHZrxvx+TZU38cB2a8b8fk2VN/HAdmvG/H5NlTfxwHZr
        xvx+TZU38cB2a8b8fk2VN/HAdmvG/H5NlTfxwOpi2dbFqmN8M9Y98ciWe1Y4ERyXRbXbC1ya0TWioBEw
        NV5g+C4PPn/PkAsIDMu6Fyq901iQMW7KVuivPK+zpP7URjOZWvAr/JrAn1tRDTx3vLI1l+9aq907oa27
        l6FA2nQUTIWMjjSzI2NYxORrERrU9SIgH3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACFZ38l
        6jEKJYKZrXSLLG6znIxLNVb611ce8BRva/4z4Gn2zAHa/wCM+Bp9swB2v+M+Bp9swB2v+M+Bp9swB2v+
        M+Bp9swB2v8AjPgafbMAdr/jPgafbMAdr/jPgafbMAdr/jPgafbMAdr/AIz4Gn2zAHa/4z4Gn2zAHa/4
        z4Gn2zAHa/4z4Gn2zAHa/wCM+Bp9swB2v+M+Bp9swB2v+M+Bp9swB2v+M+Bp9swB2v8AjPgafbMAdr/j
        PgafbMAdr/jPgafbMAdr/jPgafbMAdr/AIz4Gn2zAHa/4z4Gn2zAL5zUZNz0FDFBUtakjHSq5GuRyWfK
        97daal1KnQB7OVWPsoaaaofa0UbnInfP3mN+s9Ub6wMW1lW+V75JFu97nPcvfOcqucvrVVAujc15K6T5
        qx6amJ1GK/fus6Ryc7W6LdL5705QL/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAPOxvCXzttHU1NO7ifCrb+tr2Pa5PVfnQCpcqcnMqqa7qbEZKqNO8bEyZE541jVHfUe5eYCs6rOtjsT
        lZLW1bHpvtfGxjm9LXQoqetAPl2Yca8oT/0i/aA9nJzP/ilOvv72VTL62yI1j0817GtVPrI9OYC38lc+
        2GVlmySLTSL8WazWKvzZb6FuLutBeYCw45EciK1UVF3lRbovOipqVOcDkAAAAAAAAAAo3dK5VWbDRMX4
        S9XltyJdsTV6V0nW+bGoFCsYqqiNRVVVRERNauVdSIicaqupEA2dkLkwmH0kNOlrsbd6p8aRy6ci8/dK
        qJzI3kQD3gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8rKDJSjrm6NXTwyp
        xK5qabfNelnt9TkAqLKrc1NW7sOqFbx9Sn1p0Nlal05tJrudQKfylyKrsPW1XTyxpeyP1Oid5sjVc1b8
        l77+pAPEA9/JnL2vw9f9LUytb4NV04V6Y3Xb9ZERecC4Mld0pG6zcQp1YvhYbuZ0rGqq9v1XP6ALcwLK
        WlrW6dJPFK3j0F1t85q2cxeZyIoHpAAAAAAA/MsrWornKiNaiq5V1I1ES6qvMiawMX5aZSuxCqmqFvaR
        /cIvxY2poRttxWYiXTl0gJXmIyV92VzXvS8dMnVnciv1tib/AHd3b5iganAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfmWJrkVrka5qpZWqiKjk5FRboqcygVzlVmEwyru6FrqW
        RdelFrjVeeJy6PqYrAKdyqzGYpR3cyNKmNPjQXc9E+dFbT/tR6c4FfPYqKqORUVNSoqWVF5FTfToA+lH
        WyQuR8T3se3eexVa5OhyWX1AWfkruh6+ns2rayqZvXW0cyJ57W6LvrNVV77jAuLJXPFhddZrJ0ikX5Ke
        0TlXka5XKx68iNcqrycQE2AAAAFa5/MqvclCsTFtJVL1JOVI0s6VehUsy/zwMuAapzFZK+46Fj3NtJUq
        kzuVGKiJE3o0O66XqBYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AR/KbIDD8QT/AFVNE53hGpoTJ/7G2cqfNVVTmAp7Krc1ysu7D6hJE4oprMk6EkREY7k7prOnkCpMcycq
        qJ2hVQSxO4kelkdbvXJdr052qqAecoEsyWzpYlh9kgqXOjT5KW8sVuREVUVieY5oFxZK7o6kms2uifTu
        79t5YV51snVGdGi5OcC1cMxWGpYklPLHKxd5zHI5vRdFWy8y6wO2BlHPhlV7tr5GtdeOnvAzkVzVXqrv
        W+7b8aNaBH8gsmFxCrggt3LnosnNEzu5F/tRUReVWgbMjjRqIjURERERETeRE1IidCagOQAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPjW0MczVZNHHIxd9j2o5q9KKioB
        V2VO52oJ7upHPpn96l5IVXzXO0m/VdZO94gKdyqzQ4nQXV8Cyxp8rBeVqJyuRGo9nOrmoicqgQsDuYRj
        M9K/qlNNLE/vmOVqrzLbU5OZboBZ+E7o6uZE9lRFFK9WObHMnvb2PVqo1z2oiseiLZVREZvKBUrnKutV
        VVXWq8qrvqBoDc15K6Ec1Y9Nci9RiX5jV0pFTzn2b9RQLsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHNwIhlVmqwyvus1O1ki/Kw2ikvyuVE0Xr57XAU9lVucqyG7
        qKRlQ3f0HWimTm1r1N/TpN6AKqxLC5qd6xzxSRvTfa9qtd/RUS6c6agPzQUL5nsjiS75HNYxOVzl0W/5
        XfA2rk5gbKKCKnj+DExGIvfKmtzulzlVy86qB6IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAHSxjBKerZ1OphilZ3r2o5E5042r85qooEMwTMlh9JVsqqdZm9T0
        lbC5dONrnIrUcjl7tNFFWzXK7Xo60sgFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAD/2Q==
</value>
  </data>
</root>